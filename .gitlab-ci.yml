.before_script_ssh_setup: &before_script_ssh_setup
  # Ensure ssh-agent is installed and started.
  - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )

  # Start the ssh-agent in the background.
  - eval $(ssh-agent -s)

  # Add the SSH private key stored in the SSH_PRIVATE_KEY variable to the ssh-agent.
  # Using 'tr' to remove carriage return characters for compatibility with ed25519 keys.
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  # Create the .ssh directory and set the correct permissions.
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  # Use ssh-keyscan to add the remote server's SSH key to the known_hosts file.
  - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

# Specify the Docker image to be used for the jobs, which supports Docker commands.
image: docker:27-cli

# Define the stages of the pipeline and their order of execution.
stages:
  - build
  - test
  - deploy

# Job to compile the code in the build stage.
build-job:
  stage: build
  script:
    - echo "Compiling the code..."
    - sleep 2 # Simulate compilation time.
    - echo "Compile complete."

# Run automated API tests with Postman.
automated-api-tests:
  stage: test
  image: cimg/base:2021.04
  before_script:
    # Installing Postman CLI
    - curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
  script:
    # Login using your Postman API keys
    - postman login --with-api-key $POSTMAN_API_KEY
    - postman collection run "39898331-7adb9b48-3dce-4396-a240-b8c794652c46"

# Lint the backend code in the test stage, can run in parallel with unit-test-job.
lint-backend-job:
  stage: test
  image: node:latest
  script:
    - echo "Linting backend code..."
    - npm install
    - npx eslint ./src
    - echo "No lint issues found."

# Lint the frontend code in the test stage, can run in parallel with unit-test-job.
lint-frontend-job:
  stage: test
  image: node:latest
  script:
    - echo "Linting frontend code..."
    - npm install
    - npx eslint ./public
    - echo "No lint issues found."

# Job to deploy to the production environment.
deploy_production_job:
  stage: deploy
  environment:
    name: production
    url: http://$PRODUCTION_HOST
  variables:
    REMOTE_HOST: $PRODUCTION_HOST # Set the REMOTE_HOST variable for production.
    DOCKER_HOST: ssh://ubuntu@$PRODUCTION_HOST # Docker connection via SSH.
  before_script: *before_script_ssh_setup # Reuse SSH setup steps.
  script:
    - echo "Deploying to production..."
    - docker compose -p myphysiotrainer -f docker-compose.yml -f docker-compose.production.yml up -d --build
  only:
    - main # Only run this job on the main branch.
  needs:
    - automated-api-tests
    - lint-backend-job
    - lint-frontend-job

name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.production -t ghcr.io/${{ github.repository_owner }}/myphysiotrainer:latest .

      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/myphysiotrainer:latest

  automated-api-tests:
    name: Automated API Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Run Postman Tests
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          postman login --with-api-key $POSTMAN_API_KEY
          postman collection run "39898331-7adb9b48-3dce-4396-a240-b8c794652c46"

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm install
      - run: npx eslint ./src

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    needs: build 
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm install
      - run: npx eslint ./public

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [automated-api-tests, lint-backend, lint-frontend]
    if: github.ref == 'refs/heads/main'
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
      PRODUCTION_HOST_USER: ${{ secrets.PRODUCTION_HOST_USER }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          sudo apt-get update -y
          sudo apt-get install -y openssh-client   
          eval "$(ssh-agent -s)"
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
      
      - name: Copy docker-compose files to server
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 \
          docker-compose.production.yml \
          $PRODUCTION_HOST_USER@$PRODUCTION_HOST:/home/$PRODUCTION_HOST_USER/deploy/

      - name: Pull and Deploy Docker Image via SSH
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_HOST_USER: ${{ secrets.PRODUCTION_HOST_USER }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET}}
        run: |
          ssh -tt -o StrictHostKeyChecking=no $PRODUCTION_HOST_USER@$PRODUCTION_HOST << EOF
            pwd && ls -la
            echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" > /home/$PRODUCTION_HOST_USER/deploy/.env
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            sudo docker pull ghcr.io/${{ github.repository_owner }}/myphysiotrainer:latest
            cd /home/$PRODUCTION_HOST_USER/myphysiotrainer/deploy
            sudo docker compose -p myphysiotrainer -f docker-compose.production.yml --env-file .env up -d
            exit
          EOF
